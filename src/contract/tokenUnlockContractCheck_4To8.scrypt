import "util.scrypt";
import "tokenProto.scrypt";
import "rabinUtil.scrypt";

// opreturn + inputTokenIndexArray + nSenders(4 bytes) + receiverTokenAmountArray + receiverArray + nReceivers(4 bytes) + tokenCodeHash + tokenID
contract TokenUnlockContractCheck {

  static const int MAX_INPUT = 4;
  static const int MAX_OUTPUT = 8;

  function verifyOutput(bytes output, int tokenScriptLen, bytes tokenID): bool {
    bytes b = output[8:];
    int n = Util.fromLEUnsigned(b[:1]);
    int sum = 0;
    int offset = 0;
    if (n < 0xfd) {
      sum = 1 + n;
      offset = 1;
    } else if (n == 0xfd) {
      sum = 3 + Util.fromLEUnsigned(b[1:3]);
      offset = 3;
    } else if (n == 0xfe) {
      sum = 5 + Util.fromLEUnsigned(b[1:5]);
      offset = 5;
    } else { // n == 0xff
      // not support 8 bytes length output
      //sum = 9 + Util.fromLEUnsigned(b[1:9]);
      //offset = 9;
      require(false);
    }
    require(len(output) == sum + 8);
    // check if other output is the same token output
    bytes script = output[8 + offset:];
    if (tokenScriptLen == len(script)) {
      require(TokenProto.getTokenID(script, tokenScriptLen) != tokenID);
    }
    return true;
  }

  public function unlock(
    SigHashPreimage txPreimage,
    bytes tokenScript,
    bytes prevouts,
    bytes rabinMsgArray,
    bytes rabinPaddingArray,
    bytes rabinSigArray,
    int[RabinUtil.ORACLE_VERIFY_NUM] rabinPubKeyIndexArray,
    int[RabinUtil.ORACLE_VERIFY_NUM] rabinPubKeyVerifyArray,
    bytes rabinPubKeyHashArray,
    bytes inputTokenAddressArray,
    bytes inputTokenAmountArray,
    int nOutputs,
    bytes tokenOutputIndexArray,
    bytes tokenOutputSatoshiArray,
    bytes otherOutputArray
  ) {

    require(Tx.checkPreimage(txPreimage));

    require(hash256(prevouts) == Util.hashPrevouts(txPreimage));

    bytes scriptCode = Util.scriptCode(txPreimage);
    int scriptLen = len(scriptCode);
    bytes tokenID = scriptCode[scriptLen - TokenProto.TOKEN_ID_LEN: ];

    int tokenScriptLen = len(tokenScript);
    int pos = TokenProto.TOKEN_ID_LEN + 20;
    bytes tokenCodeHash = scriptCode[scriptLen - pos: scriptLen - TokenProto.TOKEN_ID_LEN];
    require(tokenCodeHash == TokenProto.getContractCodeHash(tokenScript, tokenScriptLen));
    require(tokenID == TokenProto.getTokenID(tokenScript, tokenScriptLen));

    int nReceivers = Util.fromLEUnsigned(scriptCode[scriptLen - pos - 4: scriptLen - pos]);
    pos += 4;

    bytes receiverArray = scriptCode[scriptLen - pos - nReceivers * TokenProto.TOKEN_ADDRESS_LEN: scriptLen - pos];
    pos += nReceivers * TokenProto.TOKEN_ADDRESS_LEN;

    bytes receiverTokenAmountArray = scriptCode[scriptLen - pos - nReceivers * TokenProto.TOKEN_AMOUNT_LEN: scriptLen - pos];
    pos += nReceivers * TokenProto.TOKEN_AMOUNT_LEN; 
    int nSenders = Util.fromLEUnsigned(scriptCode[scriptLen - pos - 4: scriptLen - pos]);
    pos += 4;
    bytes inputTokenIndexArray = scriptCode[scriptLen - pos - 4 * nSenders: scriptLen - pos];

    // verify rabin pubkey hash array
    bytes rabinPubKeyHashArrayHash = TokenProto.getRabinPubKeyHashArrayHash(tokenScript, tokenScriptLen);
    RabinUtil.verifyRabinPubKey(rabinPubKeyHashArrayHash,rabinPubKeyHashArray, rabinPubKeyVerifyArray, rabinPubKeyIndexArray);

    bool isBurn = true;
    bool hasBurningAddress = false;
    int sumInputToken = 0;
    int paddingPos = 0;
    require(nSenders <= MAX_INPUT);
    // max support loop num input token
    int prevIndex = -1;
    loop(MAX_INPUT): i {
      if (i < nSenders) {
        // verify rabin signature
        bytes rabinMsg = rabinMsgArray[i * RabinUtil.U4_RABIN_MSG_LEN: (i + 1) * RabinUtil.U4_RABIN_MSG_LEN];
        int verifyCount = 0;
        loop(RabinUtil.ORACLE_VERIFY_NUM): j {
          int rabinPubKey = rabinPubKeyVerifyArray[j];
          int arrayIndex = i * RabinUtil.ORACLE_VERIFY_NUM + j;
          int rabinSig = Util.fromLEUnsigned(rabinSigArray[arrayIndex * RabinUtil.RABIN_SIG_LEN: (arrayIndex + 1) * RabinUtil.RABIN_SIG_LEN]);
          int paddingLen = Util.fromLEUnsigned(rabinPaddingArray[paddingPos: paddingPos + RabinUtil.PADDING_SIZE_LEN]);
          bytes padding = b'';
          if (paddingLen > 0) {
            padding = rabinPaddingArray[paddingPos + RabinUtil.PADDING_SIZE_LEN: paddingPos + RabinUtil.PADDING_SIZE_LEN + paddingLen];
          }
          paddingPos += RabinUtil.PADDING_SIZE_LEN + paddingLen;
          int h = RabinUtil.rabinHash(rabinMsg + padding);
          if ((rabinSig * rabinSig) % rabinPubKey == h % rabinPubKey) {
            verifyCount += 1;
          }
        }
        require(verifyCount == RabinUtil.ORACLE_VERIFY_NUM);

        PayloadU4Data u4 = RabinUtil.loadPayloadU4(rabinMsg);
        // inputIndex must be not the same
        int inputIndex = Util.fromLEUnsigned(inputTokenIndexArray[i * 4: (i + 1) * 4]);
        require(prevIndex < inputIndex);
        prevIndex = inputIndex;
        require(u4.outpoint == prevouts[inputIndex * 36: (inputIndex + 1) * 36]);

        bytes address = inputTokenAddressArray[i * 20: (i + 1) * 20];
        if (address != TokenProto.BURN_ADDRESS) {
          isBurn = false;
        } else {
          hasBurningAddress = true;
        }
        int amount = Util.fromLEUnsigned(inputTokenAmountArray[i * 8: (i + 1) * 8]);
        bytes lockingScript = TokenProto.getNewTokenScript(tokenScript, tokenScriptLen, address, amount);

        require(hash160(lockingScript) == u4.scriptHash);

        sumInputToken = sumInputToken + amount;
      }
    }
    
    // check the outputs
    bytes outputs = b'';
    // max support loop num receiver, you can change this num, but will cause the contrac size increase. you can customize your output
    int sumOutputToken = 0;
    int tokenIndex = 0;
    int otherOutputIndex = 0;
    int tokenOutIndex = nOutputs + 1;
    if (nReceivers > 0) {
      tokenOutIndex = Util.fromLEUnsigned(tokenOutputIndexArray[0: 4]);
    }
    int prevTokenOutIndex = -1;
    require(nOutputs <= MAX_OUTPUT);
    loop(MAX_OUTPUT): i {
      if (i < nOutputs) {
        if (i == tokenOutIndex) {
          require(prevTokenOutIndex < tokenOutIndex);
          bytes address = receiverArray[tokenIndex * TokenProto.TOKEN_ADDRESS_LEN: (tokenIndex + 1) * TokenProto.TOKEN_ADDRESS_LEN];
          int tokenAmount = Util.fromLEUnsigned(receiverTokenAmountArray[tokenIndex * TokenProto.TOKEN_AMOUNT_LEN: (tokenIndex + 1) * TokenProto.TOKEN_AMOUNT_LEN]);
          require(tokenAmount > 0);
          sumOutputToken += tokenAmount;
          bytes outputScript = TokenProto.getNewTokenScript(tokenScript, tokenScriptLen, address, tokenAmount);
          int outputSatoshi = Util.fromLEUnsigned(tokenOutputSatoshiArray[tokenIndex * 8: (tokenIndex + 1) * 8]);
          bytes output = Util.buildOutput(outputScript, outputSatoshi);
          outputs += output;
          tokenIndex += 1;
          if (tokenIndex < nReceivers) {
            prevTokenOutIndex = tokenOutIndex;
            tokenOutIndex = Util.fromLEUnsigned(tokenOutputIndexArray[tokenIndex * 4: (tokenIndex + 1) * 4]);
          }
        } else {
          int outputLen = Util.fromLEUnsigned(otherOutputArray[otherOutputIndex: otherOutputIndex + 4]);
          bytes output = otherOutputArray[otherOutputIndex + 4: otherOutputIndex + 4 + outputLen];

          this.verifyOutput(output, tokenScriptLen, tokenID);

          outputs += output;
          otherOutputIndex += 4 + outputLen;
        }
      }
    }
    if (isBurn) {
      require(sumOutputToken == 0);
    } else {
      require(hasBurningAddress == false);
      require(sumInputToken == sumOutputToken);
    }
    bytes hashOutputs = hash256(outputs);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }
}