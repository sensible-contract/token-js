import "util.scrypt";
import "tokenProto.scrypt";
import "rabinUtil.scrypt";

// opreturn nSenders(4 bytes) + receiverTokenAmountArray + receiverArray + nReceivers(4 bytes) + tokenCodeHash + tokenID
contract TokenTransferCheck {

  static const int MAX_INPUT = 10;
  static const int MAX_OUTPUT = 10;
    
  public function unlock(
    SigHashPreimage txPreimage,
    bytes tokenScript,
    bytes prevouts,
    bytes rabinMsgArray,
    bytes rabinPaddingArray,
    bytes rabinSigArray,
    int[RabinUtil.ORACLE_VERIFY_NUM] rabinPubKeyIndexArray,
    int[RabinUtil.ORACLE_VERIFY_NUM] rabinPubKeyVerifyArray,
    bytes rabinPubKeyHashArray,
    bytes inputTokenAddressArray,
    bytes inputTokenAmountArray,
    bytes receiverSatoshiArray,
    int changeSatoshis,
    Ripemd160 changeAddress,
    bytes opReturnScript
  ) {

    require(Tx.checkPreimage(txPreimage));

    require(hash256(prevouts) == Util.hashPrevouts(txPreimage));

    bytes scriptCode = Util.scriptCode(txPreimage);
    int scriptLen = len(scriptCode);
    bytes tokenID = scriptCode[scriptLen - TokenProto.TOKEN_ID_LEN: ];

    int tokenScriptLen = len(tokenScript);
    int pos = TokenProto.TOKEN_ID_LEN + 20;
    bytes tokenCodeHash = scriptCode[scriptLen - pos: scriptLen - TokenProto.TOKEN_ID_LEN];
    require(tokenCodeHash == TokenProto.getContractCodeHash(tokenScript, tokenScriptLen));
    require(tokenID == TokenProto.getTokenID(tokenScript, tokenScriptLen));

    int nReceivers = Util.fromLEUnsigned(scriptCode[scriptLen - pos - 4: scriptLen - pos]);
    pos += 4;

    bytes receiverArray = scriptCode[scriptLen - pos - nReceivers * TokenProto.TOKEN_ADDRESS_LEN: scriptLen - pos];
    pos += nReceivers * TokenProto.TOKEN_ADDRESS_LEN;

    bytes receiverTokenAmountArray = scriptCode[scriptLen - pos - nReceivers * TokenProto.TOKEN_AMOUNT_LEN: scriptLen - pos];
    pos += nReceivers * TokenProto.TOKEN_AMOUNT_LEN;
    int nSenders = Util.fromLEUnsigned(scriptCode[scriptLen - pos - 4: scriptLen - pos]);

    // verify rabin pubkey hash array
    bytes rabinPubKeyHashArrayHash = TokenProto.getRabinPubKeyHashArrayHash(tokenScript, tokenScriptLen);
    RabinUtil.verifyRabinPubKey(rabinPubKeyHashArrayHash,rabinPubKeyHashArray, rabinPubKeyVerifyArray, rabinPubKeyIndexArray);

    int sumInputToken = 0;
    int paddingPos = 0;
    require(nSenders <= MAX_INPUT);
    // max support loop num input token
    loop(MAX_INPUT): i {
      if (i < nSenders) {
        // verify rabin signature
        bytes rabinMsg = rabinMsgArray[i * RabinUtil.U4_RABIN_MSG_LEN: (i + 1) * RabinUtil.U4_RABIN_MSG_LEN];
        int verifyCount = 0;
        loop(RabinUtil.ORACLE_VERIFY_NUM): j {
          int rabinPubKey = rabinPubKeyVerifyArray[j];
          int arrayIndex = i * RabinUtil.ORACLE_VERIFY_NUM + j;
          int rabinSig = Util.fromLEUnsigned(rabinSigArray[arrayIndex * RabinUtil.RABIN_SIG_LEN: (arrayIndex + 1) * RabinUtil.RABIN_SIG_LEN]);
          int paddingLen = Util.fromLEUnsigned(rabinPaddingArray[paddingPos: paddingPos + RabinUtil.PADDING_SIZE_LEN]);
          bytes padding = b'';
          if (paddingLen > 0) {
            padding = rabinPaddingArray[paddingPos + RabinUtil.PADDING_SIZE_LEN: paddingPos + RabinUtil.PADDING_SIZE_LEN + paddingLen];
          }
          paddingPos += RabinUtil.PADDING_SIZE_LEN + paddingLen;
          int h = RabinUtil.rabinHash(rabinMsg + padding);
          if ((rabinSig * rabinSig) % rabinPubKey == h % rabinPubKey) {
            verifyCount += 1;
          }
        }
        require(verifyCount == RabinUtil.ORACLE_VERIFY_NUM);

        PayloadU4Data u4 = RabinUtil.loadPayloadU4(rabinMsg);
        require(u4.outpoint == prevouts[i * 36: (i + 1) * 36]);

        bytes address = inputTokenAddressArray[i * 20: (i + 1) * 20];
        int amount = Util.fromLEUnsigned(inputTokenAmountArray[i * 8: (i + 1) * 8]);
        bytes lockingScript = TokenProto.getNewTokenScript(tokenScript, tokenScriptLen, address, amount);

        require(hash160(lockingScript) == u4.scriptHash);

        sumInputToken = sumInputToken + amount;
      }
    }
    
    // check the outputs
    bytes outputs = b'';
    // max support loop num receiver, you can change this num, but will cause the contrac size increase. you can customize your output
    int sumOutputToken = 0;
    require(nReceivers <= MAX_OUTPUT);
    loop(MAX_OUTPUT): i {
      if (i < nReceivers) {
        bytes address = receiverArray[i * TokenProto.TOKEN_ADDRESS_LEN: (i + 1) * TokenProto.TOKEN_ADDRESS_LEN];
        int tokenAmount = Util.fromLEUnsigned(receiverTokenAmountArray[i * TokenProto.TOKEN_AMOUNT_LEN: (i + 1) * TokenProto.TOKEN_AMOUNT_LEN]);
        require(tokenAmount > 0);
        sumOutputToken = sumOutputToken + tokenAmount;
        bytes outputScript = TokenProto.getNewTokenScript(tokenScript, tokenScriptLen, address, tokenAmount);
        int outputSatoshi = Util.fromLEUnsigned(receiverSatoshiArray[i * 8: (i + 1) * 8]);
        bytes output = Util.buildOutput(outputScript, outputSatoshi);
        outputs = outputs + output;
      }
    }
    require(sumInputToken == sumOutputToken);

    // op_false op_return output
    // optional
    if (len(opReturnScript) > 0) {
      require(opReturnScript[0:2] == b'006a');
      bytes opReturnOutput = Util.buildOutput(opReturnScript, 0);
      outputs = outputs + opReturnOutput;
    }

    // bsv change output
    bytes changeOutput = TxUtil.genBsvOutput(changeSatoshis, changeAddress);
    outputs = outputs +  changeOutput;

    bytes hashOutputs = hash256(outputs);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }
}